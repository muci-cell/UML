@startuml test

package "Login Module" {

    ' 登录窗口，省略界面组件和按钮事件处理方法（边界类）
    class LoginForm {

        -login :LoginBo

        ' LoginForm构造函数，初始化实例成员
        +LoginForm()

        ' 界面类的验证方法，通过调用业务逻辑类LoginBO的validate()方法实现对用户输入信息的验证
        +validate(String account,String password) :void
    }

    note right of LoginForm::LoginForm
    ...
    login=new LoginBo();
    ...
    end note

    note right of LoginForm::validate
    ...
    login.validate(account,password);
    ...
    end note

    ' 登录业务逻辑类，封装实现登录功能的业务逻辑（控制类）
    class LoginBO {
        -userDAO :IUserDAO

        ' 业务逻辑类的验证方法，通过调用数据访问类的findUserByAccAndPwd()方法验证用户输入信息的合法性
        +validate (String account,String password) :boolean

        ' Setter方法，在业务逻辑对象中注入数据访问对象（注意：此处针对抽象数据访问类编程）
        +setIUserDAO(IUserDAO) :void
    }

    note right of LoginBO::validate
    return
    userDAO.findUserByAccAndPwd(account,password);
    end note

    ' 抽象数据访问类接口，声明对User表的数据操作方法，省略除查询外的其他方法（实体类）
    interface IUserDAO {
        '业务方法声明，通过用户账号和密码在数据库中查询用户信息，判断该用户身份的合法性
        +findUserByAccAndPwd(String account,String password): User
    }

    '具体数据访问类，实现对User表的数据操作方法，省略除查询外的其他方法（实体类）
    class UserDAO implements IUserDAO {
        ' 业务方法实现，实现在IUserDAO接口中声明的数据访问方法
        +findUserByAccAndPwd(account: String, password: String): User
    }


    ' 主窗口（边界类）
    class MainForm {

        +MainForm()
    }

    LoginForm ..> MainForm

    LoginForm *-- LoginBO

    LoginBO o-- IUserDAO
}

@enduml
